name: ESP32 Build & Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar PlatformIO
        run: pip install --upgrade platformio

      - name: Compilar proyecto ESP32
        run: pio run -e esp32dev

      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: esp32-binaries
          path: |
            .pio/build/esp32dev/firmware.bin
            .pio/build/esp32dev/bootloader.bin
            .pio/build/esp32dev/partitions.bin

  release-staging:
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Descargar artefactos
        uses: actions/download-artifact@v4
        with:
          name: esp32-binaries
          path: ./artifacts

      - name: Obtener última versión
        id: version
        run: |
          latest=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "v0.0.0")
          echo "Última versión: $latest"
          base=${latest#v}
          IFS='.' read -r major minor patch <<< "$base"
          patch=$((patch+1))
          new="v$major.$minor.$patch"
          echo "Nueva versión: $new"
          echo "tag=$new" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Renombrar artefactos con versión
        run: |
          mv ./artifacts/firmware.bin ./artifacts/firmware-${{ steps.version.outputs.tag }}.bin
          mv ./artifacts/bootloader.bin ./artifacts/bootloader-${{ steps.version.outputs.tag }}.bin
          mv ./artifacts/partitions.bin ./artifacts/partitions-${{ steps.version.outputs.tag }}.bin

      - name: Crear prerelease
        run: |
          gh release create "${{ steps.version.outputs.tag }}" ./artifacts/* \
            --title "Pre-release ${{ steps.version.outputs.tag }}" \
            --notes "Build desde PR a main" \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  promote-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Obtener última pre-release
        id: pre
        run: |
          last_pre=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease==true) | .tagName')
          if [ -z "$last_pre" ]; then
            echo "❌ No hay pre-releases para promover"
            exit 1
          fi
          echo "Última pre-release: $last_pre"
          echo "tag=$last_pre" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Promover a release estable
        run: |
          gh release edit "${{ steps.pre.outputs.tag }}" \
            --prerelease=false \
            --title "Release ${{ steps.pre.outputs.tag }}" \
            --notes "Release estable generado desde main"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
